Lesson 2: Creating and Modifying Repositories
--------
  Create a new repository:
    - git init   --> Git will not do a commit initially so git log will give an error (fatal: bad default revision 'HEAD')
    - git status --> to see the status of files in the repo
    - a hidden .git folder is created with git meta data

  Add changes to repository:
    - git add --> adds files to the staging area (git add <filename>)
    - in staging area you can group files for one commit

  Comparing working directory to staging area
    - git diff --> with no arguments

  Comparing staging area to committed repository
    - git diff --staged

  Reset changes in working directory and staging area to last committed state
    - git reset --hard    --> causion: changes in staging and working dir will be lost if not committed first !!!
             first use git diff and git diff --staged to verify changes

    add only 1 file to changing area and commit to have 1 logical change.

  Branches:
    - git branch --> shows the branches (initially *master is the only branch)
    - git branch <Name> --> creates a new branch with that name
    - git branch --> shows all branches in that repository and marks the current one with '*'
    - git checkout <branchname> --> set <branchname> to be the current one
    - git checkout -b <branchname>  --> creates a new branch and sets it as current active one
    use branches to try a new feature or a new version without changing the original version

  Combining branches: Merging branches
    - git merge master coins  --> merge 2 branches
    commits are shown in chronological order for both branches in 1 list
    if you want to see the differences between 2 commits --> not the parent of the other one !!!
    - git show <commit id>  --> to show the changes on 1 commit compared to its parent
    - git branch -d coins  --> delete the branch (label is deleted, not the commits)

  Merging files:
    conflict detection and resolving conflicts







What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?